Prepare project.
Add NuGet packages → EntityFrameworkCore // EntityFrameworkCore.SqlServer // EntityFrameworkCore.Tools

===========================================================================
A) Crear DB.
Crear Data folder → crear DBNAMEContext.cs class

    public class AutoContext : DbContext
    {  
        public AutoContext(DbContextOptions<AutoContext> options) : base(options) { }

        public DbSet<CLASS> CLASSES { get; set; }
        
    }

Definir Tablas.
Crear Models folder → crear CLASS.cs

  [Table("TABLENAME")]
    public class CLASS
    {
       [Key]
        public int PROP1 { get; set; }

        [Required]
        [Column(TypeName = "varchar(50)")]

        public string PROP2 { get; set; }
        [Required]
        [Column(TypeName = "varchar(50)")]

        public string PROP3 { get; set; }
        [Column(TypeName = "varchar(50)")]

        public string PROP4 { get; set; }
        [Column(TypeName = "varchar(50)")]

        public decimal PROP5 { get; set; }
    }

===========================================================================
===========================================================================
B) Crear Mapa de Objetos Relacionales desde una BD Existente.
On Package Manager Console //Server=your-server //Database=DBName:

Scaffold-DbContext "Server=.;Database=DBNAME;Trusted_Connection=True;" Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models

===========================================================================
===========================================================================
Indicar connectionStrings.
Project properties → Settings → Name: keyDBNAME // (ConnectionString) // Application / "..." → Server name: . → database name: DBNAME

On appsettings.json

"AllowedHosts": "*",
  "ConnectionStrings": {
    "keyDBNAME": "Data Source=.;Initial Catalog=DBNAME;Integrated Security=True"
	}

===========================================================================
Indicar connstructor en startup.
On startup.cs

public void ConfigureServices(IServiceCollection services)
{
	services.AddControllers();
	services.AddDbContext<DBNAMEContext>(options => options.UseSqlServer(Configuration.GetConnectionString("KeyDBNAME")));
}

===========================================================================
Create Controller in Controllers folder.
CLASSController.cs

public class CLASSController : ControllerBase
    {
        private readonly DBNAMEContext _context;
        public CLASSController(DBNAMEContext context)
        {
            _context = context;
        }
    }

===========================================================================
Agregar Migraciones
On Package Manager Console.

add-migration DBNAME
update-database

===========================================================================
Project  → Properties → Debug → debug launch profiles → api/publisher

===========================================================================
define Methods.
on CLASSController.cs

using Microsoft.EntityFrameworkCore; //
using System.Collections.Generic; // !! para crear List<> o IEnumerable
using System.Linq;              // !! para el ToList()
using WebApiEscuela.Data; // !! proyecto.data
using WebApiEscuela.Models; // !! proyecto.models

...

public class AlumnoController : ControllerBase
    {
        public DBEscuelaAPIContext Context { get; set; }     // Propiedad context

        public AlumnoController(DBEscuelaAPIContext context)  // Constructor
        {
            this.Context = context;
        }


        [HttpGet]
        public List<Alumno>Get()
        {
            List<Alumno> alumnos = Context.Alumnos.ToList();
            return alumnos;
        }

        [HttpGet("{id}")]
        public Alumno Get(int id)
        {
            Alumno alumno = Context.Alumnos.Find(id);
            return alumno;
            var resultado = context.Alumnos.FirstOrDefault( x=> x.Id == id);
            if (resultado == null)
            {
                return NotFound();
            }
            return resultado;
        }

        [HttpPost]
        public ActionResult Post(Alumno alumno)
        {
            Context.Alumnos.Add(alumno);
            Context.SaveChanges();
            return Ok();
        }

        [HttpPut("{id}")]
        public ActionResult Put(int id, [FromBody] Alumno alumno)
        {
            if (id != alumno.Id)
            {
                return BadRequest();
            }

            Context.Entry(alumno).State= EntityState.Modified;
            Context.SaveChanges();

            return NoContent();
        }

        [HttpDelete("{id}")]
        public ActionResult<Alumno> Delete(int id)
        {
            Alumno alumno = Context.Alumnos.Find(id);
            if (alumno == null)
            {
                return NotFound();
            }

            Context.Alumnos.Remove(alumno);
            Context.SaveChanges();

            return alumno;
        }
